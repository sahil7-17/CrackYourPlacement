Similar too 3sum question where we were fixing i and running j and k in while loop becuase there were only three elements we had to found but here we will fix two 
i and j in for loop and run a while loop




class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>>ans;
        sort(nums.begin(),nums.end());   //SORTING  OF THE ARRAY 
        int n = nums.size();
        for(int i = 0; i<n; i++){
            if(i>0 && nums[i] == nums[i-1]) continue;    //TO AVOID DUPLICATE ELEMENTS
            for(int j = i+1; j<n; j++){
                if(j> i+1 && nums[j]== nums[j-1])continue; //TO AVOID DUPLICATE ELEMENTS
                int k = j+1;                              //I WILL START FROM J+1
                int l = n-1;                              //K WILL START FROM LAST OF THE ARRAY BESICALLY WE ARE DOING TWO POINTER APPROACH 
                while(k < l){
                    long long sum = nums[i] + nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if(sum == target){
                      vector<int> temp = {nums[i],nums[j],nums[k],nums[l]};
                      ans.push_back(temp);
                       k++;
                       l--;
                       while(k<l && nums[k]== nums[k-1])k++;       
                       while(k<l && nums[l] == nums[l+1])l--;
                    }
                    else if(sum < target){
                        k++;
                    }
                    else{
                        l--;
                    }
                }
            }
        }
        return ans;
    }
};
