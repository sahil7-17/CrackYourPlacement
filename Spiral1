class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int n = matrix.size();  //row
        int m = matrix[0].size(); //column
        vector<int>result;
        int dir = 0;
        /*
          if dir = 0 : left to right;
          if dir = 1 : top to bottom 
          if dir = 2 : right to left;
          if dir = 3 : bottom to top
          if(dir > 3){
            make dir = 0; 
          } 
        */
        int top = 0;
        int left = 0;
        int down = n-1;  
        int right = m-1;  
        while(top <= down && left <= right) {
            if(dir == 0){ 
                for(int i = left; i<=right; i++){
                    result.push_back(matrix[top][i]);   
                }
                top++;
            }
            if(dir == 1){
                for(int i = top; i<=down; i++){
                    result.push_back(matrix[i][right]);
                }
                right--;
            }
            if(dir == 2){
                for(int i = right; i>=left; i--){
                    result.push_back(matrix[down][i]);
                }
                down--;
            }
            if(dir == 3){
                for(int i = down; i>= top; i--){
                    result.push_back(matrix[i][left]);
                }
                left++;
            }
            dir++;
            if(dir > 3){
                dir = 0;
            }
        
        }
        return result;
    }
};
