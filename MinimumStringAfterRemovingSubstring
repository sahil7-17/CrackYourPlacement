Leetcode : 2696

You are given a string s consisting only of uppercase English letters.
You can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings "AB" or "CD" from s.

Input: s = "ABFCACDB"
Output: 2
Explanation: We can do the following operations:
- Remove the substring "ABFCACDB", so s = "FCACDB".
- Remove the substring "FCACDB", so s = "FCAB".
- Remove the substring "FCAB", so s = "FC".
So the resulting length of the string is 2.



Intution : The idea is to traverse from 0 to length-1 and if the stack top() contains A or C and if 
the current element in the loop is B or D then we don't have to push it into the stack



CPP: 
class Solution {
public:
    int minLength(string s) {
        int n = s.length();
        stack<char> st;
        for (int i = 0; i < n; i++) {
            if (!st.empty() && ((st.top() == 'A' && s[i] == 'B') ||
                                (st.top() == 'C' && s[i] == 'D'))) {
                st.pop();
            } else {
                st.push(s[i]);
            }
        }
        return st.size();
    }
};
