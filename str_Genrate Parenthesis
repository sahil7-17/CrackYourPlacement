class Solution {
public:
    vector<string>ans;
    void solve(string& res, int n, int open, int close) {
        if (res.length() == 2 * n) {
            ans.push_back(res);
            return;
        }
            //this template is use for backtracking use in lot's of problem like find all the permutation etc 
        if (open < n) {         //We can't insert while open > n 
            res.push_back('(');  //insert '('   //do something 
            solve(res, n, open + 1, close);    calling the function with open+1 //Explore 
            res.pop_back();                  // undo 
        }

        if (close < open) {  //We can' t insert while close > open 
            res.push_back(')');                //do something
            solve(res, n, open, close + 1);    //explore 
            res.pop_back();                    undo 
        }
    }
    vector<string> generateParenthesis(int n) {
        string curr = "";
        int open = 0;
        int close = 0;
        solve(curr, n, open, close);

        return ans;
    }
};
